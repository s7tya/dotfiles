-- nvim-cmp
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)

-- plugins:nvim-lspconfig
local lspconfig = require("lspconfig")
local util = require("lspconfig.util")

lspconfig.rust_analyzer.setup({
  settings = {
    ["rust-analyzer"] = {
      imports = {
        granularity = {
          group = "module",
        },
        prefix = "self",
      },
      cargo = {
        buildScripts = {
          enable = true,
        },
      },
      procMacro = {
        enable = true,
      },
    },
  },
})

lspconfig.gopls.setup({
  capabilities = capabilities,
  settings = {
    gopls = {
      gofumpt = true,
      staticcheck = true,
      completeUnimported = true,
      importShortcut = "Both",
      analyses = {
        unusedparams = true,
        shadow = true,
      },
    },
  },
  on_attach = function(client, bufnr)
    if client.server_capabilities.codeActionProvider then
      local group = vim.api.nvim_create_augroup("GoOrganizeImports", { clear = true })
      vim.api.nvim_create_autocmd("BufWritePre", {
        group = group,
        buffer = bufnr,
        callback = function()
          vim.lsp.buf.code_action({
            context = { only = { "source.organizeImports" } },
            apply   = true,
          })
        end,
      })
    end
  end,
})

lspconfig.zls.setup({
  capabilities = capabilities,
  cmd = { "zls" },
  filetypes = { "zig", "zir" },
  root_dir = util.root_pattern("build.zig", ".git"),
  settings = {
    zls = {
      enable_autofix = true,
      inlay_hints = { enable = true },
      warn_style = "default",
      enable_build_on_save = true,
    },
  },
})

lspconfig.clangd.setup({
  capabilities = capabilities,
  cmd = {
    {{- if eq .chezmoi.os "darwin" -}}
    "/opt/homebrew/opt/llvm/bin/clangd",
    {{- else -}}
    "/usr/bin/clangd",
    {{- end -}}
    "--offset-encoding=utf-16",
  },
  filetypes = { "c", "cpp", "objc", "objcpp", "cuda", "proto" },
  root_dir = lspconfig.util.root_pattern("compile_commands.json", "compile_flags.txt", ".git"),
  init_options = {
    clangdFileStatus = true, -- バッファ上部にファイルステータスを表示
    usePlaceholders = true, -- 補完でパラメータプレースホルダを展開
    completeUnimported = true, -- ヘッダ未インクルードのシンボルも候補に出す
  },
})

lspconfig.ts_ls.setup({
  capabilities = capabilities,
  init_options = {
    hostInfo = "neovim",
    preferences = {
      importModuleSpecifier = "relative",
    },
  },
})

lspconfig.ocamllsp.setup({
  capabilities = capabilities,
  cmd = { "ocamllsp" },
  filetypes = { "ocaml", "ocamlinterface", "ocamllex", "reason" },
  root_dir = util.root_pattern("*.opam", "dune-project", ".git"),
  settings = {
    ocamllsp = {
      codelens   = { enable = true },
      inlayHints = { enable = true },
      diagnostics = { enable = true },
      formatting = { enable = true },
    },
  },
})


-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd("LspAttach", {
  group = vim.api.nvim_create_augroup("UserLspConfig", {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = "v:lua.vim.lsp.omnifunc"

    -- Buffer local mappings.
    -- See :help vim.lsp.* for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
    vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
    vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
    vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
    vim.keymap.set("n", "<C-k>", vim.lsp.buf.signature_help, opts)
    vim.keymap.set("n", "<space>wa", vim.lsp.buf.add_workspace_folder, opts)
    vim.keymap.set("n", "<space>wr", vim.lsp.buf.remove_workspace_folder, opts)
    vim.keymap.set("n", "<space>wl", function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, opts)
    vim.keymap.set("n", "<space>D", vim.lsp.buf.type_definition, opts)
    vim.keymap.set("n", "<space>rn", vim.lsp.buf.rename, opts)
    vim.keymap.set({ "n", "v" }, "<space>ca", vim.lsp.buf.code_action, opts)
    vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
    vim.keymap.set("n", "<space>f", function()
      vim.lsp.buf.format({ async = true })
    end, opts)
  end,
})
